// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organization & Multi-Tenancy
model Organization {
  id                 String   @id @default(cuid())
  name               String   @db.VarChar(255)
  slug               String   @unique @db.VarChar(100)
  domain             String?  @db.VarChar(255)
  industry           String?  @db.VarChar(100)
  size               String?  @db.VarChar(50)
  timezone           String   @default("UTC") @db.VarChar(50)
  currency           String   @default("USD") @db.VarChar(3)
  taxId              String?  @db.VarChar(100)
  address            Json?
  contactInfo        Json?
  settings           Json     @default("{}")
  subscriptionPlan   String   @default("basic") @db.VarChar(50)
  subscriptionStatus String   @default("active") @db.VarChar(20)
  trialEndsAt        DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?

  // Relations
  users              User[]
  roles              Role[]
  organizationSettings OrganizationSetting[]
  customers          Customer[]
  userRoles          UserRole[]

  @@map("organizations")
}

model OrganizationSetting {
  id             String   @id @default(cuid())
  organizationId String
  category       String   @db.VarChar(100)
  key            String   @db.VarChar(255)
  value          Json
  description    String?
  isSystem       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, category, key])
  @@map("organization_settings")
}

// User Management & Authentication
model User {
  id                    String   @id @default(cuid())
  organizationId        String
  email                 String   @db.VarChar(255)
  username              String?  @unique @db.VarChar(100)
  firstName             String   @db.VarChar(100)
  lastName              String   @db.VarChar(100)
  displayName           String?  @db.VarChar(200)
  avatarUrl             String?
  phone                 String?  @db.VarChar(20)
  timezone              String   @default("UTC") @db.VarChar(50)
  locale                String   @default("en-US") @db.VarChar(10)
  status                String   @default("active") @db.VarChar(20)
  emailVerified         Boolean  @default(false)
  emailVerifiedAt       DateTime?
  lastLoginAt           DateTime?
  loginCount            Int      @default(0)
  failedLoginAttempts   Int      @default(0)
  lockedUntil           DateTime?
  passwordHash          String?  @db.VarChar(255)
  mfaEnabled            Boolean  @default(false)
  mfaSecret             String?  @db.VarChar(255)
  preferences           Json     @default("{}")
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  deletedAt             DateTime?

  // Relations
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userRoles             UserRole[]
  assignedUserRoles     UserRole[] @relation("AssignedBy")

  @@unique([organizationId, email])
  @@map("users")
}

model Role {
  id             String   @id @default(cuid())
  organizationId String
  name           String   @db.VarChar(100)
  description    String?
  permissions    Json     @default("[]")
  isSystem       Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userRoles     UserRole[]

  @@unique([organizationId, name])
  @@map("roles")
}

model UserRole {
  id             String   @id @default(cuid())
  userId         String
  roleId         String
  organizationId String
  assignedBy     String?
  assignedAt     DateTime @default(now())
  expiresAt      DateTime?
  isActive       Boolean  @default(true)

  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedByUser User?    @relation("AssignedBy", fields: [assignedBy], references: [id])

  @@unique([userId, roleId, organizationId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100)
  description String?
  category    String   @db.VarChar(100)
  resource    String   @db.VarChar(100)
  action      String   @db.VarChar(100)
  createdAt   DateTime @default(now())

  @@unique([category, resource, action])
  @@map("permissions")
}

// Customer Management System
model Customer {
  id             String   @id @default(cuid())
  organizationId String
  customerNumber String   @unique @db.VarChar(50)
  companyName    String   @db.VarChar(255)
  legalName      String?  @db.VarChar(255)
  industry       String?  @db.VarChar(100)
  website        String?
  description    String?
  status         String   @default("active") @db.VarChar(20)
  customerType   String   @default("business") @db.VarChar(50)
  source         String?  @db.VarChar(50)
  tags           String[]
  rating         Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("customers")
}
